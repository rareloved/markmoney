<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
    		http://www.springframework.org/schema/beans/spring-beans.xsd
       		http://www.springframework.org/schema/context 
     		http://www.springframework.org/schema/context/spring-context.xsd"
	   default-autowire="byName">

	<context:annotation-config />
	<context:component-scan base-package="com.sjz.markmoney" />

	<!-- 数据源配置 -->
	<bean id="dataSourceMaster" parent="abstractDataSource">
		<property name="url" value="${master.jdbc.jdbcUrl}" />
		<property name="username" value="${master.jdbc.username}" />
		<property name="password" value="${master.jdbc.password}" />
	</bean>

	<!-- Druid Config -->
	<bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  abstract="true" init-method="init" destroy-method="close">
		<!-- 初始化连接个数 -->
		<property name="initialSize" value="${jdbc.datasource.initialSize}" />
		<!-- 最大连接个数 -->
		<property name="maxActive" value="${jdbc.datasource.maxActive}" />
		<!-- 最小连接个数 -->
		<property name="minIdle" value="${jdbc.datasource.minIdle}" />
		<!-- 获取连接时最大等待时间，单位毫秒 -->
		<property name="maxWait" value="${jdbc.datasource.maxWait}" />
		<!-- 是否缓存preparedStatement，Mysql下建议关闭-->
		<property name="poolPreparedStatements" value="${jdbc.datasource.poolPreparedStatements}" />
		<property name="maxOpenPreparedStatements" value="${jdbc.datasource.maxOpenPreparedStatements}" />
		<!-- 检测是否有效的sql，如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用 -->
		<property name="validationQuery" value="SELECT 'x'" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnBorrow" value="${jdbc.datasource.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="${jdbc.datasource.testOnReturn}" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，
               执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="${jdbc.datasource.testWhileIdle}" />
		<!-- 单位：毫秒，有两个含义：
             1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接
             2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.datasource.timeBetweenEvictionRunsMillis}" />
		<!-- 连接保持空闲而不被驱逐的最长时间，单位：毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.datasource.minEvictableIdleTimeMillis}" />
		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="${jdbc.datasource.filters}" />
	</bean>

	<!-- 集成Mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceMaster" />
		<property name="configLocation" value="classpath:sqlmap-config.xml" />
		<property name="mapperLocations"  value="classpath:mybatis.mapper/*.xml"/>
	</bean>



	<!-- 扫描 mappers 自动为DAO层生成bean -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<property name="basePackage" value="com.sjz.markmoney.dao" /> <!-- 多个package可以用","分割 -->
	</bean>

</beans>